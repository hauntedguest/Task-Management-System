import cv2
import mediapipe as mp
import math
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume

# Function to set the system volume based on distance
def set_volume_from_distance(distance):
    max_distance = 200  # Adjust based on your preference

    # Map distance to volume percentage
    volume = int((distance / max_distance) * 100) 

    try:
        # Set the system volume using pycaw
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(
            IAudioEndpointVolume.iid, CLSCTX_ALL, None)
        volume_control = cast(interface, POINTER(IAudioEndpointVolume))
        volume_control.SetMasterVolumeLevelScalar(volume / 100, None)
    except Exception as e:
        print("Error setting volume:", e)

# Hand detection class
class HandDetector:

    def _init_(self, max_hands=1, min_detection_confidence=0.5, min_tracking_confidence=0.5):
        self.mp_hands = mp.solutions.hands.Hands(
            max_num_hands=max_hands,
            min_detection_confidence=min_detection_confidence,
            min_tracking_confidence=min_tracking_confidence
        )
        self.mp_draw = mp.solutions.drawing_utils
        self.tip_ids = [4, 8, 12, 16, 20]

    def find_hands(self, image, draw=True):
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        self.results = self.mp_hands.process(image_rgb) 
        if self.results.multi_hand_landmarks:
            for hand_landmarks in self.results.multi_hand_landmarks:
                if draw:
                    self.mp_draw.draw_landmarks(image, hand_landmarks, mp.solutions.hands.HAND_CONNECTIONS)
        return image

    def find_position(self, image, hand_number=0, draw=True):
        lm_list = [] 
        if self.results.multi_hand_landmarks:
            hand = self.results.multi_hand_landmarks[hand_number]
            for id, lm in enumerate(hand.landmark):
                h, w, c = image.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                lm_list.append([id, cx, cy])
                if draw:
                    cv2.circle(image, (cx, cy), 5, (255, 0, 255), cv2.FILLED) 
        return lm_list

    def calculate_distance(self, lm_list):
        distance = 0
        if lm_list and len(lm_list) >= 21: 
            thumb_tip = lm_list[self.tip_ids[0]][1:]  
            index_tip = lm_list[self.tip_ids[1]][1:]  
            distance = math.dist(thumb_tip, index_tip)  
        return distance

    def visualize_distance(self, image, distance):
        cv2.putText(image, f"Distance: {distance:.2f} pixels", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 255), 2)

def main():
    cap = cv2.VideoCapture(0)  # Changed to 0 for the default camera
    detector = HandDetector()

    while True:
        ret, frame = cap.read()
        if not ret:
             break

        frame = detector.find_hands(frame)
        lm_list = detector.find_position(frame)
        distance = detector.calculate_distance(lm_list)

        if distance > 0:
            set_volume_from_distance(distance)

        detector.visualize_distance(frame, distance)

        cv2.imshow("Live Feed", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if _name_ == "_main_":
    main()